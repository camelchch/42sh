#include <stdio.h>
#include <curses.h>
#include <term.h>
#include <stdlib.h>
#include <dirent.h>
#include "twenty_one.h"

static void	init_auto_start(int *i, int *find_start, int *res)
{
	*i = 0;
	*find_start = 0;
	*res = 0;
	g_open_dquote = -1;
	g_open_squote = -1;
}

int		auto_start(char *line)
{
	int		i;
	int		find_start;
	int		res;

	init_auto_start(&i, &find_start, &res);
	while (!find_start)
	{
		res = i;
		while (line[i] && !(g_open_squote < 0 && g_open_dquote < 0 && (line[i] == ' ' || line[i] == '\t')))
		{
			if (line[i] == '"' && dslash_before(line, i) && g_open_squote < 0)
				g_open_dquote = -g_open_dquote;
			if (line[i] == '\'' && dslash_before(line, i) && g_open_dquote < 0)
				g_open_squote = -g_open_squote;
			i++;
		}
		if (!line[i])
			find_start = 1;
		else
			i++;
	}
	return (res);
}

int		auto_current(t_line *line, int auto_start)
{
	int		i;

	i = auto_start;
	if (!i)
		return (0);
	i--;
	while (i > 0)
	{
		while (i > 0 && line->buf[i] == ' ')
			i--;
	}
	if (buf[i] != ' ' && buf[i] != '&' && buf[i] != '|')
		return (1);
	return (0);
}

t_autolist	*add_one_list(t_autolist *list, t_autolist *add)
{
	t_autolist	*cp;

	cp = list;
	if (!cp)
	{
		add->pre = NULL;
		add->ct = 0;
		return (add);
	}
	while (cp->next)
		cp = cp->next;
	add->pre = cp;
	add->ct = cp->ct + 1;
	cp->next = add;
	return (list);
}

t_autolist	*addlist_in_path(char *start, char **path, t_autolist *list)
{
	DIR				*dirp;
	struct dirent	*dir;
	t_autolist		*add;

	while (path && *path)
	{
		if ((dirp = opendir(*path)))
		{
			while ((dir = readdir(dirp)))
			{
				if (!ft_strncmp(start, dir->d_name, ft_strlen(start)))
				{
					add = malloc(sizeof(t_autolist));
					add->next = NULL;
					ft_bzero(add->name, MAX_BUF);
					ft_strcpy(add->name, dir->d_name);
					add->len = ft_strlen(add->name);
					list = add_one_list(list, add);
				}
			}
			closedir(dirp);
		}
		path++;
	}
	return (list);
}

static void	path_last_slash(char *start, char *dic, int index)
{
	int		i;

	i = ft_strlen(start) - 1;
	while (i >= 0 && start[i] != '/')
		i--;
	ft_bzero(dic, index);
	ft_strncpy(dic, start, i + 1);
}

t_autolist	*addlist_no_path(char *start, t_autolist *list)
{
	DIR				*dirp;
	struct dirent	*dir;
	t_autolist		*add;
	char			dic[MAX_BUF];

	path_last_slash(start, dic, MAX_BUF);
	if ((dirp = opendir(dic)))
	{
		while ((dir = readdir(dirp)))
		{
			if (!ft_strncmp(start + ft_strlen(dic), dir->d_name, ft_strlen(start + ft_strlen(dic))) && dir->d_name[0] != '.')
			{
				add = malloc(sizeof(t_autolist));
				add->next = NULL;
				ft_bzero(add->name, MAX_BUF);
				ft_strcpy(add->name, dir->d_name);
				add->len = ft_strlen(add->name);
				if (dir->d_type == DT_DIR)
					add->is_dic = 1;
				else
					add->is_dic = 0;
				list = add_one_list(list, add);
			}
		}
		closedir(dirp);
	}
	return (list);
}

t_autolist	*get_autolist(char *start, char **env)
{
	t_autolist	*list;
	char		**all_path;

	list = NULL;
	all_path = path(env);
	if (!ft_strchr(start, '/'))
		list = addlist_in_path(start, all_path, list);
	else
		list = addlist_no_path(start, list);
	return (list);
}

static	void	init_win(t_autolist *list, int win_col, t_win *win)
{
	t_autolist	*cp;

	cp = list;
	win->ct_lt = 0;
	win->max = 0;
	while (cp)
	{
		if (cp->len > win->max)
			win->max = cp->len;
		cp = cp->next;
	}
	win->max++;
	cp = list;
	while (cp)
	{
		(win->ct_lt)++;
		cp = cp->next;
	}
	win->col = win_col / win->max;
	if (!win->col)
		win->col = 1;
	win->line = win->ct_lt / win->col;
	if (win->ct_lt % win->col > 0)
		win->line++;
}

void	put_colum(t_line *line)
{
	t_autolist	*cp;
	t_autolist	*lt;
	t_helper	ct;

	ct.j = -1;
	lt = line->auto_lt;
	while (++(ct.j) < line->w.line)
	{
		cp = lt;
		ct.i = -1;
		while (++(ct.i) < line->w.col && cp)
		{
			ct.index = 0;
			if (cp)
			{
				if (cp->ct == line->auto_ct % nb_list(line->auto_lt))
					bg_yellow();
				ft_printf("%-*s", line->w.max, cp->name);
				color_reset();
				line->auto_is_dic = cp->is_dic;
			}
			while (cp && (ct.index)++ < line->w.line)
				cp = cp->next;
		}
		ft_printf("\n");
		lt = lt->next;
	}
}

int	nb_list(t_autolist *list)
{
	int		i;

	i = 0;
	while (list)
	{
		i++;
		list = list->next;
	}
	return (i);
}

void	free_auto_lt(t_line *line)
{
	t_autolist *temp;

	while (line->auto_lt)
	{
		temp = line->auto_lt;
		line->auto_lt = line->auto_lt->next;
		free(temp);
	}
}

static void	put_first_lst(t_line *line, char *auto_compare)
{
	char	dic[MAX_BUF];
	char	*str;

	if (ft_strchr(auto_compare, '/'))
	{
		path_last_slash(auto_compare, dic, MAX_BUF);
		str = line->auto_lt->name + ft_strlen(auto_compare) - ft_strlen(dic);
	}
	else
		str = line->auto_lt->name + ft_strlen(auto_compare);
	while (*str)
		line->printable(line, *str++);
}

static void	put_choice_end(t_line *line, int chioce_isdic)
{
	if (chioce_isdic)
		line->printable(line, '/');
	else
		line->printable(line, ' ');
	free_auto_lt(line);
}

static void	one_autolist(t_line *line, char *auto_compare)
{
	put_first_lst(line, auto_compare);
	line->move_nright(line);
	put_choice_end(line, line->auto_lt->is_dic);
}

static void	calcu_i(t_line *line, t_autolist *this,  int *i)
{
	t_autolist	*cp;

	if (line->auto_ct % nb_list(line->auto_lt) == 0)
	{
		cp = this;
		while (cp->next)
			cp = cp->next;
		*i = cp->len + 1;
	}
	else
		*i = this->pre->len + 1;
}

static void	put_choice(t_line *line, char *auto_compare, int *i)
{
	char		*str;
	t_autolist	*cp;

	cp = line->auto_lt;
	while (cp)
	{
		if (line->auto_ct % nb_list(line->auto_lt) == cp->ct)
		{
			if (line->auto_ct > 0)
			{
				calcu_i(line, cp, i);
				while (--*i)
					line->delete_key(line);
			}
			if (line->auto_ct == 0)
				put_first_lst(line, auto_compare);
			else
			{
				str = cp->name;
				while (*str)
					line->printable(line, *str++);
			}
		}
		cp = cp->next;
	}
}

static void	cusor_back(t_line *line, char *auto_compare)
{
	int			i;

	i = line->w.line + 2;
	init_attr(SETNEW);
	while (--i)
		tputs(tgetstr("up", 0), 1, my_putc);
	line->pos = 0 - line->start_po;
	move_nright(line);
	put_choice(line, auto_compare, &i);
}

int		return_key(t_line *line)
{
	line->auto_ct = -1;
	put_choice_end(line, line->auto_is_dic);
	init_attr(SETOLD);
	ft_printf("\n");
	init_attr(SETNEW);
	tputs(tgetstr("cd", 0), 1, my_putc);
	tputs(tgetstr("up", 0), 1, my_putc);
	line->pos = 0 - line->start_po;
	move_nright(line);
	return (0);
}

int		my_tabkey(t_line *line, char **env)
{
	char		*auto_compare;

	auto_compare = (char *)line->buf + auto_start((char *)line->buf);
	if (line->auto_ct == -1)
	{
		line->auto_lt = get_autolist(auto_compare, env);
		init_win(line->auto_lt, line->line_max, &(line->w));
		sort_list(&line->auto_lt);
	}
	if (nb_list(line->auto_lt))
	{
		if (nb_list(line->auto_lt) == 1)
			one_autolist(line, auto_compare);
		else
		{
			init_attr(SETOLD);
			ft_printf("\n");
			init_attr(SETNEW);
			tputs(tgetstr("cd", 0), 1, my_putc);
			init_attr(SETOLD);
			put_colum(line);
			cusor_back(line, auto_compare);
			line->auto_ct = line->auto_ct + 1;;
		}
	}
	return (0);
}

/*
   int		main()
   {
   int i = auto_start("  'ls l ' l");
   printf(" i=%d\n", i);
   return (0);

   }
   */
